<?php
/**
 * Created by PhpStorm.
 * Script Name: Bonus.php
 * Create: 2022/11/14 13:47
 * Description:
 * Author: fudaoji<fdj@kuryun.cn>
 */

namespace App\api\controller\v1;

use app\ApiController;
use app\common\model\Channel;
use app\common\model\CpOrder;
use app\common\service\Tenant as TenantService;
use app\api\service\Auth as AuthService;
use app\common\service\CpOrder as OrderService;

class Bonus extends ApiController
{
    /**
     * @var CpOrder
     */
    private $orderM;

    public function __construct()
    {
        set_time_limit(0);
        parent::__construct(); // TODO: Change the autogenerated stub
        $this->orderM = new CpOrder();
    }

    /**
     * 按sku汇总
     * @throws \think\db\exception\DbException
     * @throws \Psr\SimpleCache\InvalidArgumentException
     */
    public function skuSummary(){
        $post_data = $this->getAjax();
        try {
            $this->validate($post_data, "Bonus.orderList");
        }catch (\Exception $e){
            return $this->jError($e->getMessage());
        }

        $tenant_info = AuthService::tenantInfo();
        $begin_time = $post_data['begin_time'];
        $end_time = $post_data['end_time'];

        $rids = TenantService::getRids($tenant_info);
        $where = [
            ['order.leader_id','=',TenantService::getLeaderId($tenant_info)],
            ['order.valid_code','in', [16, 17]]
        ];

        if(!empty($post_data['search_key'])){
            $where[] = ['order.sku_id','=', $post_data['search_key']];
        }

        if(TenantService::isLeader($tenant_info)){
            $where[] = ['order.rid', '>', 0];
        }else{
            $where[] = ['order.rid', 'in', $rids];
        }
        if(!empty($post_data['rid'])){
            $where[] = ['order.rid', '=', $post_data['rid']];
        }

        $where[] = ['order_time', 'between', [$begin_time, $end_time . ' 23:59:59']];

        $query = $this->orderM->alias('order')
            ->where($where)
            ->join('cp_activity activity','activity.id=order.activity_id', 'left')
            ->join('cp_goods goods','goods.sku_id=order.sku_id and goods.activity_id=order.activity_id', 'left')
            ->join('channel','channel.rid = order.rid', 'left')
            ->join('tenant tenant','tenant.id = channel.tenant_id', 'left')
            ->group('order.sku_id');
        $total = $query
            ->count();
        //var_dump($this->orderM->getLastSql());
        if ($total) {
            $list = $query->page($post_data['current_page'], $post_data['page_size'])
                ->order(['order_num' => 'desc'])
                ->field([
                    'order.sku_id','order.sku_name','sku_img_url','order.sku_owner','order.sku_shop_name','order.activity_id',
                    'order.price','tenant.realname','order.sku_product_id','order.rid',
                    'COUNT(order.id) AS order_num', 'SUM(order.estimate_cos_price) AS order_gmv',
                    'SUM(order.estimate_fee) as total_estimate_fee',
                    'COUNT(order.actual_cos_price > 0.00 OR NULL) AS total_settle_num','SUM(order.actual_cos_price) AS total_actual_price',
                    'SUM(order.actual_fee) as total_actual_fee',
                ])
                ->select();

            //var_dump($query->getLastSql());
            foreach ($list as $k => $v){

            }
        }else{
            $list = [];
            $total = null;
        }
        return $this->jSuccess('success', ['total' => $total, 'list' => $list, 'rids' => $rids]);
    }

    /**
     * 订单明细
     * @return \support\Response
     * @throws \Psr\SimpleCache\InvalidArgumentException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * Author: fudaoji<fdj@kuryun.cn>
     */
    public function orderList(){
        $post_data = $this->getAjax();
        try {
            $this->validate($post_data, "Bonus.orderList");
        }catch (\Exception $e){
            return $this->jError($e->getMessage());
        }

        $tenant_info = AuthService::tenantInfo();
        $begin_time = $post_data['begin_time'];
        $end_time = $post_data['end_time'];

        $rids = TenantService::getRids($tenant_info);
        $where = [
            ['order.leader_id', '=', TenantService::getLeaderId($tenant_info)]
        ];
        if(!empty($post_data['search_key'])){
            $where[] = ['order_id', '=', $post_data['search_key']];
        }
        if(!empty($post_data['order_status'])){
            switch ($post_data['order_status']){
                case 1:
                    $where[] = ['order.valid_code', '=', 16];
                    break;
                case 2:
                    $where[] = ['order.valid_code', '=', 17];
                    break;
                case 3:
                    $where[] = ['order.valid_code', '=', 15];
                    break;
                default:
                    $where[] = ['order.valid_code', 'notin', [15,16,17]];
            }
        }
        if(TenantService::isLeader($tenant_info)){
            $where[] = ['order.rid', '>', 0];
        }else{
            $where[] = ['order.rid', 'in', $rids];
        }
        if(!empty($post_data['rid'])){
            $where[] = ['order.rid', '=', $post_data['rid']];
        }

        $where[] = ['order_time', 'between', [$begin_time, $end_time . ' 23:59:59']];

        $query = $this->orderM->alias('order')
            ->where($where)
            ->join('cp_activity activity','activity.id=order.activity_id', 'left')
            ->join('cp_goods goods','goods.sku_id=order.sku_id and goods.activity_id=order.activity_id', 'left')
            ->join('channel','channel.rid = order.rid', 'left')
            ->join('tenant tenant','tenant.id = channel.tenant_id', 'left');
        $total = $query->count();
        if($total){
            $list = $query->field('order_id,order_time,order.estimate_fee,sku_img_url,valid_code,order.sku_name,order.sku_id,sku_num,sku_return_num
            ,order.estimate_cos_price,order.actual_cos_price,order.commission_rate,order.estimate_fee,actual_fee,order.rid')
                ->page($post_data['current_page'], $post_data['page_size'])
                ->select();
            foreach ($list as $k => $item){
                $order_status = $this->orderM->orderStatusList($item['valid_code']);
                $item['order_status'] = is_string($order_status) ? $order_status : '无效';
                $list[$k] = $item;
            }
        }else{
            $list = [];
        }
        return  $this->jSuccess('success', ['total' => $total, 'list' => $list, 'rids' => $rids]);
    }

    /**
     * 日期汇总
     * @return \support\Response
     * Author: fudaoji<fdj@kuryun.cn>
     * @throws \Psr\SimpleCache\InvalidArgumentException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function dailySummary(){
        $post_data = $this->getAjax();
        try {
            $this->validate($post_data, "Bonus.dailySummary");
        }catch (\Exception $e){
            return $this->jError($e->getMessage());
        }

        $tenant_info = AuthService::tenantInfo();
        $begin_time = $post_data['begin_time'];
        $end_time = $post_data['end_time'];

        $rids = TenantService::getRids($tenant_info);
        $where = [
            ['order.leader_id', '=', TenantService::getLeaderId($tenant_info)],
            ['order.valid_code', 'in', [16, 17]]
        ];
        if(TenantService::isLeader($tenant_info)){
            $where[] = ['order.rid', '>', 0];
        }else{
            $where[] = ['order.rid', 'in', $rids];
        }
        if(!empty($post_data['rid'])){
            $where[] = ['order.rid', '=', $post_data['rid']];
        }

        $where[] = ['order_time', 'between', [$begin_time, $end_time . ' 23:59:59']];

        $list = $this->orderM->alias('order')
            ->where($where)
            ->join('cp_activity activity','activity.id=order.activity_id', 'left')
            ->join('cp_goods goods','goods.sku_id=order.sku_id and goods.activity_id=order.activity_id', 'left')
            ->join('channel','channel.rid = order.rid', 'left')
            ->join('tenant tenant','tenant.id = channel.tenant_id', 'left')
            ->group('DATE_FORMAT(order_time, "%Y%m%d")')
            ->field('DATE_FORMAT(order_time, "%Y%m%d") as date, sum(order.estimate_fee) as estimate_fee, count(order.id) as order_num')
            ->order('date', 'desc')
            ->select();
        return  $this->jSuccess('success', ['list' => $list, 'rids' => $rids]);
    }

    /**
     * 个人中心预估服务费统计数据
     * @return \support\Response
     * @throws \Psr\SimpleCache\InvalidArgumentException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * Author: fudaoji<fdj@kuryun.cn>
     */
    public function statics(){
        $tenant_info = AuthService::tenantInfo();
        $next_month = date('Ymd', strtotime('+1 month', strtotime(date('Y-m-01'))));
        $data = [
            'today' => fa_money_format(OrderService::getChannelEstimateFee(['tenant_info' => $tenant_info,'begin_time' => date('Y-m-d'), 'end_time' => date('Y-m-d H:i:s')])/2),
            'cur_month' => fa_money_format(OrderService::getChannelActualFee(['tenant_info' => $tenant_info,'begin_time' => date('Ym01'), 'end_time' => date('Ymd', strtotime($next_month)-1)])/2),
            'next_month' => fa_money_format(OrderService::getChannelActualFee(['tenant_info' => $tenant_info,'begin_time' => $next_month, 'end_time' => date('Ymd', strtotime('+1 month', strtotime($next_month))-1)])/2)
        ];
        //var_dump($this->orderM->getLastSql());
        return  $this->jSuccess('success', $data);
    }

    /**
     * 业绩概览
     * @return \support\Response
     * Author: fudaoji<fdj@kuryun.cn>
     * @throws \Psr\SimpleCache\InvalidArgumentException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function summary(){
        $post_data = $this->getAjax();
        try {
            $this->validate($post_data, "Bonus.summary");
        }catch (\Exception $e){
            return $this->jError($e->getMessage());
        }

        $tenant_info = AuthService::tenantInfo();
        $data = [
            'fee' => '0.00',
            'channel' => $tenant_info['realname'],
            'goods_num' => '0',
            'order_num' => '0',
            'gmv' => '0.00',
            'estimate_fee' => '0.00',
            'service_rate' => AuthService::tenantExtendInfo('service_rate') . '%'
        ];
        $begin_time = $post_data['begin_time'];
        $end_time = $post_data['end_time'];

        $rids = TenantService::getRids($tenant_info);
        $where = [
            ['order.leader_id', '=', TenantService::getLeaderId($tenant_info)],
            ['order.valid_code', 'in', [16, 17]]
        ];
        if(TenantService::isLeader($tenant_info)){
            $where[] = ['order.rid', '>', 0];
        }else{
            $where[] = ['order.rid', 'in', $rids];
        }

        if($post_data['type'] == 1){
            $where[] = ['order_time', 'between', [$begin_time, $end_time . ' 23:59:59']];
        }else{
            $where[] = ['pay_month', 'between', [date('Ymd', strtotime($begin_time)), date('Ymd', strtotime($end_time))]];
        }

        $list = $this->orderM->alias('order')
            ->where($where)
            ->join('cp_activity activity','activity.id=order.activity_id', 'left')
            ->join('cp_goods goods','goods.sku_id=order.sku_id and goods.activity_id=order.activity_id', 'left')
            ->join('channel','channel.rid = order.rid', 'left')
            ->join('tenant tenant','tenant.id = channel.tenant_id', 'left')
            ->field('SUM(order.estimate_fee) as estimate_fee,COUNT(sku_num-sku_return_num) AS goods_num,
            SUM(estimate_cos_price) AS gmv, SUM(actual_fee) AS actual_fee,COUNT(*) AS order_num')
            ->select();
        //var_dump($this->orderM->getLastSql());
        if(count($list)){
            $data = array_merge($data, $list[0]->toArray());
        }

        $data['gmv'] = fa_money_format($data['gmv']);
        $data['estimate_fee'] = fa_money_format($data['estimate_fee']);
        return  $this->jSuccess('success', $data);
    }
}