<?php

namespace app\admin\controller;

use app\AdminController;
use GuzzleHttp\Client;
use support\Request;

class Upgrade extends AdminController
{
    private $uKey = 'DaoAdminToken';
    public $user = []; //开发者信息
    public $token = '';
    static public $baseUrl = 'http://daoadmin.kuryun.com';
    static public $apis = [];
    /**
     * @var Client
     */
    private $client;

    public function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
        set_time_limit(0); //防止超时
        self::$apis = [
            'getUser'       => 'user/getPost',
            'login'         => 'auth/loginPost',
            'download'      => 'app/downloadPost',
            'getVersions' => 'framework/getVersions',
            'getUpgradePackage' => 'framework/getUpgradePackage'
        ];
        $this->setClient();
    }

    /**
     * 获取个人信息
     * @return array|mixed
     * Author: fudaoji<fdj@kuryun.cn>
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function getUserInfo(){
        if (!empty($token = session($this->uKey))) {
            $this->token = $token;
            $res = $this->doRequest(['uri' => self::$apis['getUser']]);
            if($res['code'] == 1){
                $this->user = $res['data']['user'];
                if($this->user){
                    session([$this->uKey => $token]);
                }else{
                    session([$this->uKey => null]);
                }
            }
        }
        $this->assign('user', $this->user);
        $this->assign('token', $this->token);
        return $this->user;
    }

    /**
     * 设置请求客户端
     * Author: fudaoji<fdj@kuryun.cn>
     */
    private function setClient(){
        $this->client = new Client(['base_uri' => self::$baseUrl . '/api/']);
    }

    /**
     * 请求官方接口
     * @param array $params
     * @return mixed
     * Author: fudaoji<fdj@kuryun.cn>
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    protected function doRequest($params = []){
        $data = empty($params['data']) ? [] : $params['data'];
        $request = new \GuzzleHttp\Psr7\Request('post', $params['uri'], ['token' => $this->token]);
        try {
            $res = $this->client->send($request, [
                'json' => $data
            ]);
            if($res->getStatusCode() == 200){
                return json_decode($res->getBody()->getContents(), true);
            }
        }catch (\Exception $e){
            dao_log()->error(json_encode($e->getMessage(), JSON_UNESCAPED_UNICODE));
        }
        return ['code' => 0, 'msg' => "请求失败"];
    }

    /**
     * 版本列表
     * @return mixed
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function index(){
        $this->getUserInfo();
        $this->assign('official_href', self::$baseUrl);

        if(request()->isPost()){
            $post_data = input('post.');
            $params = [
                'current_page' => $post_data['page'],
                'page_size' => $post_data['limit']
            ];
            $res = $this->doRequest(['uri' => self::$apis['getVersions'], 'data' => $params]);
            if($res['code'] != 1){
                return $this->error($res['msg']);
            }
            $total = $res['data']['total'];
            $list = $res['data']['list'];
            return $this->success('success', '', ['total' => $total, 'list' => $list]);
        }

        $builder = new ListBuilder();
        $builder->setTip("当前版本：<em class='layui-btn layui-badge layui-bg-blue'>".config('app.version')."</em>")
            //->addTopButton('self', ['title' => '升级到最新版本'])
            ->addTableColumn(['title' => '版本', 'field' => 'version'])
            ->addTableColumn(['title' => '版本描述', 'field' => 'desc', 'type' => 'pre'])
            ->addTableColumn(['title' => '发布时间', 'field' => 'create_time', 'type' => 'datetime', 'minWidth' => 170])
            ->addTableColumn(['title' => '操作', 'minWidth' => 120, 'type' => 'toolbar'])
            ->addRightButton('self', ['text' => '升级到此版本','class' => 'layui-btn-normal','data-ajax' => true,'data-confirm' => true, 'href' => url('upgradepost', ['id' => '__data_id__'])]);
        if(empty($this->user)){
            $builder->addTopButton('addnew', ['text' => '登录开发者社区', 'title' => '登录开发者社区', 'href' => url('login')]);
        }
        return $builder->show();
    }

    /**
     * 登录
     * @return mixed
     * Author: fudaoji<fdj@kuryun.cn>
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function login()
    {
        $this->getUserInfo();
        $this->assign('official_href', self::$baseUrl);
        if($this->user){
            return $this->redirect(url('index'));
        }

        if (request()->isPost()) {
            $data = input('post.');
            $params = [
                'username' => $data['username'],
                'password' => $data['password']
            ];
            $res = $this->doRequest(['uri' => self::$apis['login'], 'data' => $params]);
            if(!empty($res['code']) && $res['code'] == 1){
                session([$this->uKey => $res['data']['token']]);
                return $this->success($res['msg']);
            }else{
                $jump = \request()->header('referer');
                return $this->error($res['msg'] ?? '登录失败！', $jump, ['token' => token()]);
            }
        }

        $builder = new FormBuilder();
        $builder->setMetaTitle('开发者登录')
            ->setPostUrl(url('login'))
            ->setTip('未注册？<a href="'.self::$baseUrl.'/user/auth/register" target="_blank">点击去注册</a>')
            ->addFormItem('username', 'text', '账号', '在DaoAdmin社区注册的手机账号', [], 'required')
            ->addFormItem('password', 'password', '密码', '密码', [], 'required')
            ->setBtnSubmit(['text' => '登录'])
            ->setBtnReset(['show' => 0]);

        return $builder->show();
    }

    /**
     * 升级应用
     * @return \support\Response
     * Author: fudaoji<fdj@kuryun.cn>
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function upgradePost()
    {
        $this->getUserInfo();

        if (!$this->token)
            return  $this->error('请先登录开发者社区', url('login'));

        if (request()->isPost()) {
            $post_data = input('post.');
            $root_path = base_path();
            $res = $this->doRequest(['uri' => self::$apis['getUpgradePackage'], 'data' => ['id' => $post_data['id']]]);
            if($res['code'] == 1){
                $upgrade = $res['data']['package'];
            }else{
                return  $this->error($res['msg']);
            }
            if($upgrade['version'] <= config('app.version')){
                return  $this->error('请选择大于系统当前版本的项进行升级！');
            }

            $zip = new \ZipArchive;
            $tem_file = runtime_path() . $upgrade['version'].'-'.time() . '.tmp';
            $response = (new Client())->post($upgrade['upgrade_url']);
            if($response->getStatusCode() === 200){
                $package = $response->getBody()->getContents();
                file_put_contents($tem_file, $package);
            }else{
                return  $this->error('下载升级包出错: ' . $response->getStatusCode());
            }

            try {
                $res = $zip->open($tem_file);
                if ($res === true) {
                    $zip->extractTo($root_path);
                    $zip->close();
                } else {
                    return $this->error('解压失败，请检查是否有写入权限');
                }
            }catch (\Exception $e){
                return $this->error('覆盖文件失败：' . $e->getMessage());
            }

            $upgrade_sql = $root_path . '/upgrade.sql';
            if (is_file($upgrade_sql)) {
                if(is_string($res = import_sql($upgrade_sql))){
                    return $this->error('导入upgrade.sql出错：' . $res);
                }
                @unlink($upgrade_sql);
            }
            @unlink($tem_file);
            system_reload(); //reload system
            return $this->success('升级成功!');
        }
    }
}